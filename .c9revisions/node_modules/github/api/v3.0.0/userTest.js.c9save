{"ts":1380303794074,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Copyright 2012 Cloud9 IDE, Inc.\n *\n * This product includes software developed by\n * Cloud9 IDE, Inc (http://c9.io).\n *\n * Author: Mike de Boer <info@mikedeboer.nl>\n */\n\n\"use strict\";\n\nvar Assert = require(\"assert\");\nvar Client = require(\"./../../index\");\n\ndescribe(\"[user]\", function() {\n    var client;\n    var token = \"c286e38330e15246a640c2cf32a45ea45d93b2ba\";\n\n    beforeEach(function() {\n        client = new Client({\n            version: \"3.0.0\"\n        });\n        client.authenticate({\n            type: \"oauth\",\n            token: token\n        });\n    });\n\n    it(\"should successfully execute GET /users/:user (getFrom)\",  function(next) {\n        client.user.getFrom(\n            {\n                user: \"String\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute GET /user (get)\",  function(next) {\n        client.user.get(\n            {},\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute PATCH /user (update)\",  function(next) {\n        client.user.update(\n            {\n                name: \"String\",\n                email: \"String\",\n                blog: \"String\",\n                company: \"String\",\n                location: \"String\",\n                hireable: \"Boolean\",\n                bio: \"String\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute GET /user/orgs (getOrgs)\",  function(next) {\n        client.user.getOrgs(\n            {\n                page: \"Number\",\n                per_page: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute GET /user/emails (getEmails)\",  function(next) {\n        client.user.getEmails(\n            {\n                page: \"Number\",\n                per_page: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute POST /user/emails (addEmails)\",  function(next) {\n        client.user.addEmails(\n            {},\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute DELETE /user/emails (deleteEmails)\",  function(next) {\n        client.user.deleteEmails(\n            {},\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute GET /users/:user/followers (getFollowers)\",  function(next) {\n        client.user.getFollowers(\n            {\n                user: \"String\",\n                page: \"Number\",\n                per_page: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute GET /users/:user/following (getFollowingFromUser)\",  function(next) {\n        client.user.getFollowingFromUser(\n            {\n                user: \"String\",\n                page: \"Number\",\n                per_page: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute GET /user/following (getFollowing)\",  function(next) {\n        client.user.getFollowing(\n            {\n                page: \"Number\",\n                per_page: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute GET /user/following/:user (getFollowUser)\",  function(next) {\n        client.user.getFollowUser(\n            {\n                user: \"String\",\n                page: \"Number\",\n                per_page: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute PUT /user/following/:user (followUser)\",  function(next) {\n        client.user.followUser(\n            {\n                user: \"String\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute DELETE /user/following/:user (unFollowUser)\",  function(next) {\n        client.user.unFollowUser(\n            {\n                user: \"String\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute GET /user/keys (getKeys)\",  function(next) {\n        client.user.getKeys(\n            {\n                page: \"Number\",\n                per_page: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute GET /user/keys/:id (getKey)\",  function(next) {\n        client.user.getKey(\n            {\n                id: \"String\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute POST /user/keys (createKey)\",  function(next) {\n        client.user.createKey(\n            {\n                title: \"String\",\n                key: \"String\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute PATCH /user/keys/:id (updateKey)\",  function(next) {\n        client.user.updateKey(\n            {\n                id: \"String\",\n                title: \"String\",\n                key: \"String\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute DELETE /user/keys/:id (deleteKey)\",  function(next) {\n        client.user.deleteKey(\n            {\n                id: \"String\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":7494}]],"length":7494}
