{"ts":1380308472342,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n *  mixin orgs\n *\n *  Copyright 2012 Cloud9 IDE, Inc.\n *\n *  This product includes software developed by\n *  Cloud9 IDE, Inc (http://c9.io).\n *\n *  Author: Mike de Boer <info@mikedeboer.nl>\n **/\n\n\"use strict\";\n\nvar error = require(\"./../../error\");\nvar Util = require(\"./../../util\");\n\nvar orgs = module.exports = {\n    orgs: {}\n};\n\n(function() {\n    /** section: github\n     *  orgs#getFromUser(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getFromUser = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#get(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - org (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.get = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#update(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - org (String): Required. \n     *  - billing_email (String): Optional. Optional string - Billing email address. This address is not publicized. \n     *  - company (String): Optional. \n     *  - email (String): Optional. Optional string - Publicly visible email address. \n     *  - location (String): Optional. \n     *  - name (String): Optional. \n     **/\n    this.update = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#getMembers(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - org (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getMembers = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#getMember(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - org (String): Required. \n     *  - user (String): Required. \n     **/\n    this.getMember = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#removeMember(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - org (String): Required. \n     *  - user (String): Required. \n     **/\n    this.removeMember = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#getPublicMembers(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - org (String): Required. \n     **/\n    this.getPublicMembers = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#getPublicMember(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - org (String): Required. \n     *  - user (String): Required. \n     **/\n    this.getPublicMember = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#publicizeMembership(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - org (String): Required. \n     *  - user (String): Required. \n     **/\n    this.publicizeMembership = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#concealMembership(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - org (String): Required. \n     *  - user (String): Required. \n     **/\n    this.concealMembership = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#getTeams(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - org (String): Required. \n     **/\n    this.getTeams = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#getTeam(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - id (String): Required. \n     **/\n    this.getTeam = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#createTeam(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - org (String): Required. \n     *  - name (String): Required. \n     *  - repo_names (Array): Optional. Optional array of strings \n     *  - permission (String): Optional. `pull` - team members can pull, but not push or administer this repositories (Default), `push` - team members can pull and push, but not administer this repositores, `admin` - team members can pull, push and administer these repositories. Validation rule: ` ^(pull|push|admin)$ `.\n     **/\n    this.createTeam = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#updateTeam(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - id (String): Required. \n     *  - name (String): Required. \n     *  - permission (String): Optional. `pull` - team members can pull, but not push or administer this repositories (Default), `push` - team members can pull and push, but not administer this repositores, `admin` - team members can pull, push and administer these repositories. Validation rule: ` ^(pull|push|admin)$ `.\n     **/\n    this.updateTeam = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#deleteTeam(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - id (String): Required. \n     **/\n    this.deleteTeam = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#getTeamMembers(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - id (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getTeamMembers = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#getTeamMember(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - id (String): Required. \n     *  - user (String): Required. \n     **/\n    this.getTeamMember = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#addTeamMember(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - id (String): Required. \n     *  - user (String): Required. \n     **/\n    this.addTeamMember = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#deleteTeamMember(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - id (String): Required. \n     *  - user (String): Required. \n     **/\n    this.deleteTeamMember = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#getTeamRepos(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - id (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getTeamRepos = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#getTeamRepo(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - id (String): Required. \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     **/\n    this.getTeamRepo = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#addTeamRepo(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - id (String): Required. \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     **/\n    this.addTeamRepo = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  orgs#deleteTeamRepo(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - id (String): Required. \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     **/\n    this.deleteTeamRepo = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n}).call(orgs.orgs);\n"]],"start1":0,"start2":0,"length1":0,"length2":35194}]],"length":35194}
