{"ts":1380254586903,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n *  mixin user\n *\n *  Copyright 2012 Cloud9 IDE, Inc.\n *\n *  This product includes software developed by\n *  Cloud9 IDE, Inc (http://c9.io).\n *\n *  Author: Mike de Boer <info@mikedeboer.nl>\n **/\n\n\"use strict\";\n\nvar error = require(\"./../../error\");\nvar Util = require(\"./../../util\");\n\nvar user = module.exports = {\n    user: {}\n};\n\n(function() {\n    /** section: github\n     *  user#getFrom(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     **/\n    this.getFrom = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#get(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  No params, simply pass an empty Object literal `{}`\n     **/\n    this.get = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#update(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - name (String): Optional. \n     *  - email (String): Optional. \n     *  - blog (String): Optional. \n     *  - company (String): Optional. \n     *  - location (String): Optional. \n     *  - hireable (Boolean): Optional. \n     *  - bio (String): Optional. \n     **/\n    this.update = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#getOrgs(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getOrgs = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#getEmails(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getEmails = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#addEmails(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  No params, simply pass an empty Object literal `{}`\n     **/\n    this.addEmails = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#deleteEmails(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  No params, simply pass an empty Object literal `{}`\n     **/\n    this.deleteEmails = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#getFollowers(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getFollowers = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#getFollowingFromUser(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getFollowingFromUser = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#getFollowing(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getFollowing = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#getFollowUser(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getFollowUser = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#followUser(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     **/\n    this.followUser = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#unFollowUser(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     **/\n    this.unFollowUser = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#getKeys(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getKeys = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#getKey(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - id (String): Required. \n     **/\n    this.getKey = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#createKey(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - title (String): Required. \n     *  - key (String): Required. \n     **/\n    this.createKey = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#updateKey(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - id (String): Required. \n     *  - title (String): Required. \n     *  - key (String): Required. \n     **/\n    this.updateKey = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  user#deleteKey(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - id (String): Required. \n     **/\n    this.deleteKey = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n}).call(user.user);\n"]],"start1":0,"start2":0,"length1":0,"length2":27249}]],"length":27249}
