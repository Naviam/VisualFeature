{"ts":1380341272046,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Copyright 2012 Cloud9 IDE, Inc.\n *\n * This product includes software developed by\n * Cloud9 IDE, Inc (http://c9.io).\n *\n * Author: Mike de Boer <info@mikedeboer.nl>\n */\n\n\"use strict\";\n\nvar Assert = require(\"assert\");\nvar Client = require(\"./../../index\");\n\ndescribe(\"[pullRequests]\", function() {\n    var client;\n    var token = \"c286e38330e15246a640c2cf32a45ea45d93b2ba\";\n\n    beforeEach(function() {\n        client = new Client({\n            version: \"3.0.0\"\n        });\n        client.authenticate({\n            type: \"oauth\",\n            token: token\n        });\n    });\n\n    it(\"should successfully execute GET /repos/:user/:repo/pulls (getAll)\",  function(next) {\n        client.pullRequests.getAll(\n            {\n                user: \"String\",\n                repo: \"String\",\n                state: \"String\",\n                page: \"Number\",\n                per_page: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute GET /repos/:user/:repo/pulls/:number (get)\",  function(next) {\n        client.pullRequests.get(\n            {\n                user: \"String\",\n                repo: \"String\",\n                number: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute POST /repos/:user/:repo/pulls (create)\",  function(next) {\n        client.pullRequests.create(\n            {\n                user: \"String\",\n                repo: \"String\",\n                title: \"String\",\n                body: \"String\",\n                base: \"String\",\n                head: \"String\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute POST /repos/:user/:repo/pulls (createFromIssue)\",  function(next) {\n        client.pullRequests.createFromIssue(\n            {\n                user: \"String\",\n                repo: \"String\",\n                issue: \"Number\",\n                base: \"String\",\n                head: \"String\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute PATCH /repos/:user/:repo/pulls/:number (update)\",  function(next) {\n        client.pullRequests.update(\n            {\n                user: \"String\",\n                repo: \"String\",\n                number: \"Number\",\n                state: \"String\",\n                title: \"String\",\n                body: \"String\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute GET /repos/:user/:repo/pulls/:number/commits (getCommits)\",  function(next) {\n        client.pullRequests.getCommits(\n            {\n                user: \"String\",\n                repo: \"String\",\n                number: \"Number\",\n                page: \"Number\",\n                per_page: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute GET /repos/:user/:repo/pulls/:number/files (getFiles)\",  function(next) {\n        client.pullRequests.getFiles(\n            {\n                user: \"String\",\n                repo: \"String\",\n                number: \"Number\",\n                page: \"Number\",\n                per_page: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute GET /repos/:user/:repo/pulls/:number/merge (getMerged)\",  function(next) {\n        client.pullRequests.getMerged(\n            {\n                user: \"String\",\n                repo: \"String\",\n                number: \"Number\",\n                page: \"Number\",\n                per_page: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute PUT /repos/:user/:repo/pulls/:number/merge (merge)\",  function(next) {\n        client.pullRequests.merge(\n            {\n                user: \"String\",\n                repo: \"String\",\n                number: \"Number\",\n                commit_message: \"String\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute GET /repos/:user/:repo/pulls/:number/comments (getComments)\",  function(next) {\n        client.pullRequests.getComments(\n            {\n                user: \"String\",\n                repo: \"String\",\n                number: \"Number\",\n                page: \"Number\",\n                per_page: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute GET /repos/:user/:repo/pulls/comments/:number (getComment)\",  function(next) {\n        client.pullRequests.getComment(\n            {\n                user: \"String\",\n                repo: \"String\",\n                number: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute POST /repos/:user/:repo/pulls/:number/comments (createComment)\",  function(next) {\n        client.pullRequests.createComment(\n            {\n                user: \"String\",\n                repo: \"String\",\n                number: \"Number\",\n                body: \"String\",\n                commit_id: \"String\",\n                path: \"String\",\n                position: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute POST /repos/:user/:repo/pulls/:number/comments (createCommentReply)\",  function(next) {\n        client.pullRequests.createCommentReply(\n            {\n                user: \"String\",\n                repo: \"String\",\n                number: \"Number\",\n                body: \"String\",\n                in_reply_to: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute PATCH /repos/:user/:repo/pulls/comments/:number (updateComment)\",  function(next) {\n        client.pullRequests.updateComment(\n            {\n                user: \"String\",\n                repo: \"String\",\n                number: \"Number\",\n                body: \"String\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n\n    it(\"should successfully execute DELETE /repos/:user/:repo/pulls/comments/:number (deleteComment)\",  function(next) {\n        client.pullRequests.deleteComment(\n            {\n                user: \"String\",\n                repo: \"String\",\n                number: \"Number\"\n            },\n            function(err, res) {\n                Assert.equal(err, null);\n                // other assertions go here\n                next();\n            }\n        );\n    });\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":8241}]],"length":8241}
