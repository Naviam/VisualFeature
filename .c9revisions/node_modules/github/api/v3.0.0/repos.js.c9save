{"ts":1380308530568,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n *  mixin repos\n *\n *  Copyright 2012 Cloud9 IDE, Inc.\n *\n *  This product includes software developed by\n *  Cloud9 IDE, Inc (http://c9.io).\n *\n *  Author: Mike de Boer <info@mikedeboer.nl>\n **/\n\n\"use strict\";\n\nvar error = require(\"./../../error\");\nvar Util = require(\"./../../util\");\n\nvar repos = module.exports = {\n    repos: {}\n};\n\n(function() {\n    /** section: github\n     *  repos#getAll(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - type (String): Optional. Possible values: `all`, `owner`, `public`, `private`, `member`. Default: `all`. Validation rule: ` ^(all|owner|public|private|member)$ `.\n     *  - sort (String): Optional. Possible values: `created`, `updated`, `pushed`, `full_name`. Default: `full_name`. Validation rule: ` ^(created|updated|pushed|full_name)$ `.\n     *  - direction (String): Optional. Validation rule: ` ^(asc|desc)$ `.\n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getAll = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getFromUser(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - type (String): Optional. Possible values: `all`, `owner`, `member`. Default: `public`. Validation rule: ` ^(all|owner|member)$ `.\n     *  - sort (String): Optional. Possible values: `created`, `updated`, `pushed`, `full_name`. Default: `full_name`. Validation rule: ` ^(created|updated|pushed|full_name)$ `.\n     *  - direction (String): Optional. Validation rule: ` ^(asc|desc)$ `.\n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getFromUser = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getFromOrg(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - org (String): Required. \n     *  - type (String): Optional. Possible values: `all`, `public`, `member`. Default: `all`. Validation rule: ` ^(all|public|member)$ `.\n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getFromOrg = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#create(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - name (String): Required. \n     *  - description (String): Optional. \n     *  - homepage (String): Optional. \n     *  - private (Boolean): Optional. Optional boolean - true to create a private repository, false to create a public one. Creating private repositories requires a paid GitHub account. Default is false. \n     *  - has_issues (Boolean): Optional. Optional boolean - true to enable issues for this repository, false to disable them. Default is true. \n     *  - has_wiki (Boolean): Optional. Optional boolean - true to enable the wiki for this repository, false to disable it. Default is true. \n     *  - has_downloads (Boolean): Optional. Optional boolean - true to enable downloads for this repository, false to disable them. Default is true. \n     *  - auto_init (Boolean): Optional. Optional boolean - true to create an initial commit with empty README. Default is false \n     *  - gitignore_template (String): Optional. Optional string - Desired language or platform .gitignore template to apply. Ignored if auto_init parameter is not provided. \n     **/\n    this.create = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#createFromOrg(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - org (String): Required. \n     *  - name (String): Required. \n     *  - description (String): Optional. \n     *  - homepage (String): Optional. \n     *  - private (Boolean): Optional. Optional boolean - true to create a private repository, false to create a public one. Creating private repositories requires a paid GitHub account. Default is false. \n     *  - has_issues (Boolean): Optional. Optional boolean - true to enable issues for this repository, false to disable them. Default is true. \n     *  - has_wiki (Boolean): Optional. Optional boolean - true to enable the wiki for this repository, false to disable it. Default is true. \n     *  - has_downloads (Boolean): Optional. Optional boolean - true to enable downloads for this repository, false to disable them. Default is true. \n     *  - auto_init (Boolean): Optional. Optional boolean - true to create an initial commit with empty README. Default is false \n     *  - gitignore_template (String): Optional. Optional string - Desired language or platform .gitignore template to apply. Ignored if auto_init parameter is not provided. \n     *  - team_id (Number): Optional. Optional number - The id of the team that will be granted access to this repository. This is only valid when creating a repo in an organization. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.createFromOrg = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#get(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     **/\n    this.get = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#update(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - name (String): Required. \n     *  - description (String): Optional. \n     *  - homepage (String): Optional. \n     *  - private (Boolean): Optional. Optional boolean - true to create a private repository, false to create a public one. Creating private repositories requires a paid GitHub account. Default is false. \n     *  - has_issues (Boolean): Optional. Optional boolean - true to enable issues for this repository, false to disable them. Default is true. \n     *  - has_wiki (Boolean): Optional. Optional boolean - true to enable the wiki for this repository, false to disable it. Default is true. \n     *  - has_downloads (Boolean): Optional. Optional boolean - true to enable downloads for this repository, false to disable them. Default is true. \n     **/\n    this.update = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#delete(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     **/\n    this.delete = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#merge(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - base (String): Required. Required string - The branch (or git ref) you want your changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repo that requests a merge to a base of another repo. \n     *  - head (String): Required. Required string - The branch (or git ref) where your changes are implemented. \n     *  - commit_message (String): Optional. Optional string - Commit message to use for the merge commit. If omitted, a default message will be used. \n     **/\n    this.merge = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getContributors(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - anon (Boolean): Optional. Optional flag. Set to 1 or true to include anonymous contributors in results. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getContributors = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getLanguages(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getLanguages = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getTeams(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getTeams = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getTags(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getTags = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getBranches(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getBranches = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getBranch(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - branch (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getBranch = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getCollaborators(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getCollaborators = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getCollaborator(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - collabuser (String): Required. \n     **/\n    this.getCollaborator = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#addCollaborator(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - collabuser (String): Required. \n     **/\n    this.addCollaborator = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#removeCollaborator(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - collabuser (String): Required. \n     **/\n    this.removeCollaborator = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getCommits(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - sha (String): Optional. Optional string - Sha or branch to start listing commits from. \n     *  - path (String): Optional. Optional string - Only commits containing this file path will be returned. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     *  - since (Date): Optional. Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ \n     **/\n    this.getCommits = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getCommit(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - sha (String): Required. \n     **/\n    this.getCommit = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getAllCommitComments(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getAllCommitComments = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getCommitComments(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - sha (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getCommitComments = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#createCommitComment(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - sha (String): Required. \n     *  - body (String): Required. \n     *  - commit_id (String): Required. Required string - Sha of the commit to comment on. \n     *  - path (String): Optional. Optional string - Relative path of the file to comment on. \n     *  - position (Number): Optional. Optional number - Line index in the diff to comment on. \n     *  - line (Number): Optional. Optional number - Line number in the file to comment on. Defaults to 1. \n     **/\n    this.createCommitComment = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getCommitComment(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - id (String): Required. \n     **/\n    this.getCommitComment = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#updateCommitComment(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - id (String): Required. \n     *  - body (String): Required. \n     **/\n    this.updateCommitComment = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#compareCommits(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - base (String): Required. Required string - The branch (or git ref) you want your changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repo that requests a merge to a base of another repo. \n     *  - head (String): Required. Required string - The branch (or git ref) where your changes are implemented. \n     **/\n    this.compareCommits = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#deleteCommitComment(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - id (String): Required. \n     **/\n    this.deleteCommitComment = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getReadme(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - ref (String): Optional. The String name of the Commit/Branch/Tag. Defaults to master. \n     **/\n    this.getReadme = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getContent(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - path (String): Optional. The content path. \n     *  - ref (String): Optional. The String name of the Commit/Branch/Tag. Defaults to master. \n     **/\n    this.getContent = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getArchiveLink(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - ref (String): Required. String of the name of the fully qualified reference (ie: heads/master). If it doesn’t have at least one slash, it will be rejected. \n     *  - archive_format (String): Required. Either tarball or zipball Validation rule: ` ^(tarball|zipball)$ `.\n     **/\n    this.getArchiveLink = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getDownloads(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getDownloads = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getDownload(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - id (String): Required. \n     **/\n    this.getDownload = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#deleteDownload(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - id (String): Required. \n     **/\n    this.deleteDownload = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getForks(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - sort (String): Optional. Possible values: `newest`, `oldest`, `watchers`, default: `newest`. Validation rule: ` ^(newest|oldest|watchers)$ `.\n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getForks = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#fork(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - org (String): Optional. Optional String - Organization login. The repository will be forked into this organization. \n     **/\n    this.fork = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getKeys(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getKeys = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getKey(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - id (String): Required. \n     **/\n    this.getKey = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#createKey(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - title (String): Required. \n     *  - key (String): Required. \n     **/\n    this.createKey = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#updateKey(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - id (String): Required. \n     *  - title (String): Required. \n     *  - key (String): Required. \n     **/\n    this.updateKey = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#deleteKey(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - id (String): Required. \n     **/\n    this.deleteKey = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getStargazers(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getStargazers = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getStarred(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getStarred = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getStarredFromUser(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getStarredFromUser = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getStarring(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getStarring = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#star(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     **/\n    this.star = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#unStar(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     **/\n    this.unStar = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getWatchers(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getWatchers = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getWatched(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getWatched = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getWatchedFromUser(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getWatchedFromUser = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getWatching(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getWatching = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#watch(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     **/\n    this.watch = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#unWatch(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     **/\n    this.unWatch = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getHooks(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getHooks = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#getHook(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - id (String): Required. \n     **/\n    this.getHook = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#createHook(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - name (String): Required. \n     *  - config (Json): Required. Required hash - A Hash containing key/value pairs to provide settings for this hook. These settings vary between the services and are defined in the github-services repo. Booleans are stored internally as `1` for true, and `0` for false. Any JSON true/false values will be converted automatically. \n     *  - events (Array): Optional. Optional array - Determines what events the hook is triggered for. Default: `['push']`. \n     *  - active (Boolean): Optional. Optional boolean - Determines whether the hook is actually triggered on pushes. \n     **/\n    this.createHook = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#updateHook(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - id (String): Required. \n     *  - name (String): Required. \n     *  - config (Json): Required. Required hash - A Hash containing key/value pairs to provide settings for this hook. Modifying this will replace the entire config object. These settings vary between the services and are defined in the github-services repo. Booleans are stored internally as `1` for true, and `0` for false. Any JSON true/false values will be converted automatically. \n     *  - events (Array): Optional. Optional array - Determines what events the hook is triggered for. This replaces the entire array of events. Default: `['push']`. \n     *  - add_events (Array): Optional. Optional array - Determines a list of events to be added to the list of events that the Hook triggers for. \n     *  - remove_events (Array): Optional. Optional array - Determines a list of events to be removed from the list of events that the Hook triggers for. \n     *  - active (Boolean): Optional. Optional boolean - Determines whether the hook is actually triggered on pushes. \n     **/\n    this.updateHook = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#testHook(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - id (String): Required. \n     **/\n    this.testHook = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  repos#deleteHook(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - id (String): Required. \n     **/\n    this.deleteHook = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n}).call(repos.repos);\n"]],"start1":0,"start2":0,"length1":0,"length2":99071}]],"length":99071}
