{"ts":1380341317164,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n *  mixin pullRequests\n *\n *  Copyright 2012 Cloud9 IDE, Inc.\n *\n *  This product includes software developed by\n *  Cloud9 IDE, Inc (http://c9.io).\n *\n *  Author: Mike de Boer <info@mikedeboer.nl>\n **/\n\n\"use strict\";\n\nvar error = require(\"./../../error\");\nvar Util = require(\"./../../util\");\n\nvar pullRequests = module.exports = {\n    pullRequests: {}\n};\n\n(function() {\n    /** section: github\n     *  pullRequests#getAll(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - state (String): Optional. Validation rule: ` ^(open|closed)$ `.\n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getAll = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  pullRequests#get(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - number (Number): Required. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.get = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  pullRequests#create(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - title (String): Required. \n     *  - body (String): Optional. \n     *  - base (String): Required. Required string - The branch (or git ref) you want your changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repo that requests a merge to a base of another repo. \n     *  - head (String): Required. Required string - The branch (or git ref) where your changes are implemented. \n     **/\n    this.create = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  pullRequests#createFromIssue(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - issue (Number): Required. Validation rule: ` ^[0-9]+$ `.\n     *  - base (String): Required. Required string - The branch (or git ref) you want your changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repo that requests a merge to a base of another repo. \n     *  - head (String): Required. Required string - The branch (or git ref) where your changes are implemented. \n     **/\n    this.createFromIssue = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  pullRequests#update(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - number (Number): Required. Validation rule: ` ^[0-9]+$ `.\n     *  - state (String): Optional. Validation rule: ` ^(open|closed)$ `.\n     *  - title (String): Required. \n     *  - body (String): Optional. \n     **/\n    this.update = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  pullRequests#getCommits(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - number (Number): Required. Validation rule: ` ^[0-9]+$ `.\n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getCommits = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  pullRequests#getFiles(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - number (Number): Required. Validation rule: ` ^[0-9]+$ `.\n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getFiles = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  pullRequests#getMerged(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - number (Number): Required. Validation rule: ` ^[0-9]+$ `.\n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getMerged = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  pullRequests#merge(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - number (Number): Required. Validation rule: ` ^[0-9]+$ `.\n     *  - commit_message (String): Optional. Optional string - The message that will be used for the merge commit \n     **/\n    this.merge = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  pullRequests#getComments(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - number (Number): Required. Validation rule: ` ^[0-9]+$ `.\n     *  - page (Number): Optional. Page number of the results to fetch. Validation rule: ` ^[0-9]+$ `.\n     *  - per_page (Number): Optional. A custom page size up to 100. Default is 30. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getComments = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  pullRequests#getComment(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - number (Number): Required. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.getComment = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  pullRequests#createComment(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - number (Number): Required. Validation rule: ` ^[0-9]+$ `.\n     *  - body (String): Required. \n     *  - commit_id (String): Required. Required string - Sha of the commit to comment on. \n     *  - path (String): Required. Required string - Relative path of the file to comment on. \n     *  - position (Number): Required. Required number - Column index in the diff to comment on. \n     **/\n    this.createComment = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  pullRequests#createCommentReply(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - number (Number): Required. Validation rule: ` ^[0-9]+$ `.\n     *  - body (String): Required. \n     *  - in_reply_to (Number): Required. \n     **/\n    this.createCommentReply = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  pullRequests#updateComment(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - number (Number): Required. Validation rule: ` ^[0-9]+$ `.\n     *  - body (String): Required. \n     **/\n    this.updateComment = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n    /** section: github\n     *  pullRequests#deleteComment(msg, callback) -> null\n     *      - msg (Object): Object that contains the parameters and their values to be sent to the server.\n     *      - callback (Function): function to call when the request is finished with an error as first argument and result data as second argument.\n     * \n     *  ##### Params on the `msg` object:\n     * \n     *  - user (String): Required. \n     *  - repo (String): Required. \n     *  - number (Number): Required. Validation rule: ` ^[0-9]+$ `.\n     **/\n    this.deleteComment = function(msg, block, callback) {\n        var self = this;\n        this.client.httpSend(msg, block, function(err, res) {\n            if (err)\n                return self.sendError(err, null, msg, callback);\n\n            var ret;\n            try {\n                ret = res.data && JSON.parse(res.data);\n            }\n            catch (ex) {\n                if (callback)\n                    callback(new error.InternalServerError(ex.message), res);\n                return;\n            }\n            \n            if (!ret)\n                ret = {};\n            if (!ret.meta)\n                ret.meta = {};\n            [\"x-ratelimit-limit\", \"x-ratelimit-remaining\", \"x-oauth-scopes\", \"link\", \"location\"].forEach(function(header) {\n                if (res.headers[header])\n                    ret.meta[header] = res.headers[header];\n            });\n            \n            if (callback)\n                callback(null, ret);\n        });\n    };\n\n}).call(pullRequests.pullRequests);\n"]],"start1":0,"start2":0,"length1":0,"length2":25570}]],"length":25570}
